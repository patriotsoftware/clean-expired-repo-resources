name: Get Expired Branches
author: DevOps
description: Get expired branches based on retention policy

inputs:
  namespace:
    description: 'Helm namespace'
    required: true
  release-names-array:
    description: 'Release names array'
    default: ''
    required: false
  days-retention:
    description: 'Retention policy days'
    required: false
    default: 14
  aws-access-key-id:
    description: 'AWS Access Key ID'
    required: true
  aws-secret-access-key:
    description: 'AWS Secret Access Key'
    required: true
  cdk-folder:
    description: 'CDK folder path. Default is deploy.'
    required: false
    default: 'deploy'
outputs:
  expired-branches:
    description: 'Expired branches'
    value: ${{ steps.expired.outputs.array }}
  release-names:
    description: 'Release names'
    value: ${{ steps.release-names.outputs.array }}
    
runs:
  using: 'composite'
  steps:
  - name: Set release names array
    id: release-names
    shell: bash
    run: |
      namespace=${{ inputs.namespace }}
      passed=${{ inputs.release-names-array }}
      if [ -z "${passed}" ]; 
      then        
        single="($namespace)"
        echo "array=$single" >> $GITHUB_OUTPUT
      else
        echo "array=${{ inputs.release-names-array }}" >> $GITHUB_OUTPUT
      fi      

  - uses: actions/checkout@v3
    with:
      fetch-depth: 0 # Fetch all history for all branches and tags

  - name: Fetch all branches
    shell: bash
    run: git fetch --all

  - name: Determine Expired Branches
    id: find-expired
    shell: bash
    run: |
      EXPIRATION_DATE=$(date -d "${{ inputs.days-retention }} days ago" +%s)
      branches=()
      echo "/// ${{ inputs.namespace }} /// Branches with last commit $(date -d @${EXPIRATION_DATE} +'%Y-%m-%d %H:%M:%S') and older are expired. Resources can be restored with another branch deploy."

      for branch in $(git branch -r | grep -v '\->'); do
        BRANCH_NAME=${branch#origin/}
        LAST_COMMIT=$(git log -1 --format=%ct $branch)

        if [ "$LAST_COMMIT" -lt "$EXPIRATION_DATE" ] && [ "$BRANCH_NAME" != "main" ]; 
        then
          LAST_COMMIT_DATE=$(date -d @$LAST_COMMIT +'%Y-%m-%d %H:%M:%S')
          
          echo "$LAST_COMMIT_DATE last commit $BRANCH_NAME"
          branches+=($BRANCH_NAME)        
        fi
      done

      echo "----"
      echo "array=${branches[@]}" >> $GITHUB_OUTPUT

  - name: Branches
    id: expired
    shell: bash
    run: |
      data="${{ steps.find-expired.outputs.array }}"
      data=$(printf '"%s"\n' $data|paste -sd, -)
      echo "before: $data"
      # data="{\"branches\": [$data]}"
      echo "array={\"branches\": [$data]}" >> $GITHUB_OUTPUT